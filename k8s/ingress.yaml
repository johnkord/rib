apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rib-ingress
  namespace: rib
  labels:
    app: rib
  annotations:
    # nginx ingress controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # Increase proxy timeouts for large image uploads
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    # Optional: Enable CORS for frontend API calls
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  ingressClassName: nginx
  rules:
  - host: rib.example.com  # Replace with your domain
    http:
      paths:
      # API routes go to backend
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: rib-backend-service
            port:
              number: 8080
      # OpenAPI docs go to backend
      - path: /docs
        pathType: Prefix
        backend:
          service:
            name: rib-backend-service
            port:
              number: 8080
      # Everything else goes to frontend
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rib-frontend-service
            port:
              number: 80
  # Optional: TLS configuration
  # Uncomment and configure for HTTPS
  # tls:
  # - hosts:
  #   - rib.example.com
  #   secretName: rib-tls-secret