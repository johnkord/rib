name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    name: Build / Lint / Test (${{ matrix.toolchain }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ stable, beta, nightly ]
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy
      - name: Show version
        run: rustc -Vv
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Tests
        run: cargo test --all --all-features --no-fail-fast

  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      - name: Run cargo audit
        run: cargo audit --json > audit.json || true
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
            sarif_file: audit.json

  docker:
    name: Build & Push Docker Image
    needs: [build-test]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest,ghcr.io/${{ github.repository }}:${{ github.ref_name }}

  feature-matrix:
    name: Feature Matrix (default & postgres)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rib
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      fail-fast: false
      matrix:
        mode: [default, postgres]
    env:
      JWT_SECRET: test-jwt-secret-key-which-is-long-enough-123456
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/rib
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Wait for Postgres (only postgres mode)
        if: matrix.mode == 'postgres'
        run: until pg_isready -h localhost -U postgres; do sleep 2; done
      - name: Build
        run: |
          if [ "${{ matrix.mode }}" = "postgres" ]; then
            cargo build --no-default-features --features postgres-store
          else
            cargo build
          fi
      - name: Test
        run: |
          if [ "${{ matrix.mode }}" = "postgres" ]; then
            cargo test --no-default-features --features postgres-store
          else
            cargo test
          fi
